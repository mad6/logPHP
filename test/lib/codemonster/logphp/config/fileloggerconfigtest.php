<?php

namespace codemonster\logphp\config;

use codemonster\logphp\Priority;

/**
 * Test class for FileLoggerConfig.
 * Generated by PHPUnit on 2011-12-09 at 22:07:03.
 */
class FileLoggerConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var FileLoggerConfig
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $filename = __DIR__ . DIRECTORY_SEPARATOR . 'test.log';
        $this->object = new FileLoggerConfig($filename);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testConstruct()
    {
        $filename = __DIR__ . DIRECTORY_SEPARATOR . 'test.log';
        $level = Priority::ERR;
        $object = new FileLoggerConfig($filename, $level);
        self::assertEquals($filename, $object->getFilename());
        self::assertEquals($level, $object->getLogLevel());

        $this->setExpectedException(
                '\\codemonster\\logphp\\config\\LoggerConfigException');
        $object = new FileLoggerConfig('');
    }

    public function testConstructInvalidLevel()
    {
        $filename = __DIR__ . DIRECTORY_SEPARATOR . 'test.log';
        $this->setExpectedException(
                '\\codemonster\\logphp\\config\\LoggerConfigException');
        $object = new FileLoggerConfig($filename, 99999);
    }

    public function testSetFilename()
    {
        $filename = 'test_log_file.log';
        $this->object->setFilename($filename);
        self::assertEquals($filename, $this->object->getFilename());

        $this->setExpectedException(
                '\\codemonster\\logphp\\config\\LoggerConfigException');
        $this->object->setFilename('');
    }

    public function testGetFilename()
    {
        $filename = 'test_log_file_get.log';
        $this->object->setFilename($filename);
        self::assertEquals($filename, $this->object->getFilename());

        $filename = __DIR__ . DIRECTORY_SEPARATOR .
                'other_test_log_file_get.log';
        $this->object->setFilename($filename);
        self::assertEquals($filename, $this->object->getFilename());
    }

    public function testSetFileMode()
    {
        $filemode = 0531;
        $this->object->setFileMode($filemode);
        self::assertEquals($filemode, $this->object->getFileMode());

        $filemode = 0644;
        $this->object->setFileMode($filemode);
        self::assertEquals($filemode, $this->object->getFileMode());
    }

    public function testGetFileMode()
    {
        $mode = 0666;
        $this->object->setFileMode($mode);
        self::assertEquals($mode, $this->object->getFileMode());

        $mode = 0424;
        $this->object->setFileMode($mode);
        self::assertEquals($mode, $this->object->getFileMode());
    }

    public function testSetDirMode()
    {
        $mode = 0740;
        $this->object->setDirMode($mode);
        self::assertEquals($mode, $this->object->getDirMode());

        $mode = 0777;
        $this->object->setDirMode($mode);
        self::assertEquals($mode, $this->object->getDirMode());
    }

    public function testGetDirMode()
    {
        $mode = 0700;
        $this->object->setDirMode($mode);
        self::assertEquals($mode, $this->object->getDirMode());

        $mode = 0755;
        $this->object->setDirMode($mode);
        self::assertEquals($mode, $this->object->getDirMode());
    }

}