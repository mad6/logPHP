<?php

namespace codemonster\logphp;

use codemonster\logphp\Priority;

/**
 * Test class for Logger.
 * Generated by PHPUnit on 2011-12-10 at 08:52:06.
 */
abstract class LoggerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Logger
     */
    protected $object;

    public function testSetLogLevel()
    {
        for ($p = Priority::EMERG; $p <= Priority::DEBUG; ++$p)
        {
            $this->object->setLogLevel($p);
            self::assertEquals($p, $this->object->getLogLevel());
            $basemsg = sprintf('Priority test error: logger %s, message %%s', $p);

            for ($pt = Priority::EMERG; $pt <= Priority::DEBUG; ++$pt)
            {
                $msg = sprintf('Message with priority %s', $pt);
                $err = sprintf($basemsg, $pt);
                self::assertEquals(($pt <= $p), $this->object->log($msg, $pt),
                        $err);
            }
        }

        $this->setExpectedException('\\codemonster\\logphp\\LoggerException');
        $this->object->setLogLevel(8);
    }

    public function testGetLogLevel()
    {
        for ($p = Priority::EMERG; $p <= Priority::DEBUG; ++$p)
        {
            $this->object->setLogLevel($p);
            self::assertEquals($p, $this->object->getLogLevel());
        }
    }

    public function testEmerg()
    {
        $this->object->setLogLevel(Priority::EMERG);
        self::assertTrue($this->object->emerg('emergency message'));
    }

    public function testCrit()
    {
        $this->object->setLogLevel(Priority::CRIT);
        self::assertTrue($this->object->crit('critical message'));
    }

    public function testAlert()
    {
        $this->object->setLogLevel(Priority::ALERT);
        self::assertTrue($this->object->alert('alert message'));
    }

    public function testErr()
    {
        $this->object->setLogLevel(Priority::ERR);
        self::assertTrue($this->object->err('error message'));
    }

    public function testWarning()
    {
        $this->object->setLogLevel(Priority::WARNING);
        self::assertTrue($this->object->warning('warning message'));
    }

    public function testNotice()
    {
        $this->object->setLogLevel(Priority::NOTICE);
        self::assertTrue($this->object->notice('notice message'));
    }

    public function testInfo()
    {
        $this->object->setLogLevel(Priority::INFO);
        self::assertTrue($this->object->info('info message'));
    }

    public function testDebug()
    {
        $this->object->setLogLevel(Priority::DEBUG);
        self::assertTrue($this->object->debug('debug message'));
    }

    public function testLog()
    {
        $this->object->setLogLevel(Priority::DEBUG);
        $basemsg = sprintf('Priority test error: logger %s, message %%s',
                Priority::DEBUG);

        for ($p = Priority::EMERG; $p <= Priority::DEBUG; ++$p)
        {
            $msg = sprintf('Message with priority %s', $p);
            self::assertTrue($this->object->log($msg), sprintf($basemsg, $p));
        }

        $this->object->setLogLevel(Priority::EMERG);
        $basemsg = sprintf('Priority test error: logger %s, message %%s',
                Priority::EMERG);

        for ($p = Priority::ALERT; $p <= Priority::DEBUG; ++$p)
        {
            $msg = sprintf('Message with priority %s', $p);
            self::assertFalse($this->object->log($msg), sprintf($basemsg, $p));
        }
    }

    public function testDoLog()
    {
        $this->testLog();
    }

}